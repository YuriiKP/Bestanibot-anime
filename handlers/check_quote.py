from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from loader import dp, bot, am, um
from texts import qoutes_moder, get_keys
from states import State_check_true_msg, State_check_false_msg, State_edit_quote_moder
from custom_callbackdata import CallbackData_CheckQuote
from custom_filters import IsModer
from keyboards import MyCallback



# –í—Å–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
@dp.message(F.text == qoutes_moder, IsModer())
async def show_all_quotes_moder(message: Message, state: FSMContext):
    quotes = await am.get_anime_quotes_moder()

    if quotes:
        await message.answer(
            text=f'<b>–í–°–ï–ì–û –¶–ò–¢–ê–¢:</b> {len(quotes)}',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=quotes[0][0]).pack())]
            ])
        )
    else:
        await message.answer(
            text='–ü—É—Å—Ç–æ'
        )


# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–∏—Ç–∞—Ç—É
@dp.callback_query(CallbackData_CheckQuote.filter(F.action == 'check_quote'), IsModer())
async def process_check_quote(query: CallbackQuery, state: FSMContext, callback_data: CallbackData_CheckQuote):
    await state.clear()

    await query.message.delete()

    file_unique_id = callback_data.file_unique_id
    anime_quote = await am.get_anime_quote_moder_by_id(file_unique_id)
    await state.update_data(user_id=anime_quote[8], file_unique_id=file_unique_id)

    quote = anime_quote[3]
    anime_title = anime_quote[4]
    time_code = anime_quote[5]
    keys = anime_quote[6]
    type = anime_quote[7]
    user_id_creator = anime_quote[8]

    text = f'<a href="tg://user?id={user_id_creator}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n\n<b>–¶–ò–¢–ê–¢–ê:</b> {quote}\n<b>–ù–ê–ó–í–ê–ù–ò–ï –ê–ù–ò–ú–ï:</b> {anime_title}\n<b>–¢–ê–ô–ö–û–î:</b> {time_code}\n<b>–ö–õ–Æ–ß–ò:</b> {keys}\n<b>–¢–ò–ü:</b> {type}'

    await query.message.answer_video(
        video=anime_quote[1],
        caption=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=CallbackData_CheckQuote(action='true', file_unique_id=file_unique_id).pack())],
            [InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=CallbackData_CheckQuote(action='false', file_unique_id=file_unique_id).pack())],
            [InlineKeyboardButton(text='üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=CallbackData_CheckQuote(action='edit', file_unique_id=file_unique_id).pack())],
            [InlineKeyboardButton(text='üçå –ü–û–®–ï–õ –ù–ê–•*–ô', callback_data=CallbackData_CheckQuote(action='ban', file_unique_id=file_unique_id).pack())],
        ])
    )


##################################
#######--–û–î–û–ë–†–ï–ù–ò–ï –¶–ò–¢–ê–¢–´--#######
##################################

# –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.callback_query(CallbackData_CheckQuote.filter(F.action == 'true'), IsModer())
async def check_quote_true_msg(query: CallbackQuery, state: FSMContext, callback_data: CallbackData_CheckQuote):
    await state.set_state(State_check_true_msg.msg)
    
    data = await state.get_data()

    await query.message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_true_msg')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=data['file_unique_id']).pack())],
        ])
    )


# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.callback_query(F.data == 'skip_true_msg', IsModer())
async def skip_true_msg(query: CallbackQuery, state: FSMContext):
    text = '<b>ü´° –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞ –≤ –±–æ—Ç–∞, —Å–ø–∞—Å–∏–±–æ</b>'
    await state.update_data(msg=text)

    await query.message.answer(
        text=f'<b>–°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n{text}',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_true_msg')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='true', file_unique_id='0').pack())],
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(State_check_true_msg.msg, IsModer())
async def msg_true(message: Message, state: FSMContext):
    msg =  f'<b>ü´° –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞ –≤ –±–æ—Ç–∞, —Å–ø–∞—Å–∏–±–æ</b>\n\n{message.text}'
    
    await state.update_data(msg=msg)

    await message.answer(
        text=msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_true_msg')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='true', file_unique_id='0').pack())],
        ])
    )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –±–æ—Ç–∞
@dp.callback_query(F.data == 'send_true_msg', IsModer())
async def send_true_msg(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    
    msg = data['msg']
    user_id = data['user_id']
    file_unique_id = data['file_unique_id']

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ü–∏—Ç–∞—Ç—É
    anime_quote = await am.get_anime_quote_moder_by_id(file_unique_id)
    await am.del_anime_quote_moder_by_id(file_unique_id)
    await am.add_amine_qoute(
        file_unique_id=anime_quote[0], 
        file_id=anime_quote[1], 
        file_path=anime_quote[2],
        quote=anime_quote[3],
        anime_title=anime_quote[4],
        time_code=anime_quote[5],
        keys=anime_quote[6],
        type=anime_quote[7],
        user_id=anime_quote[8]
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –∏ –∫–∞—á–∞–µ–º —Ñ–∞–π–ª
    await bot.download(file=anime_quote[1], destination=anime_quote[2])
    await um.update_user(anime_quote[8], count_anime=1)

    await query.message.delete()
    await query.answer(
        text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ'
    )

    await bot.send_message(
        chat_id=user_id,
        text=msg
    )


###################################
#######--–û–¢–ö–õ–û–ù–ï–ù–ò–ï –¶–ò–¢–ê–¢–´--#######
###################################

@dp.callback_query(CallbackData_CheckQuote.filter(F.action == 'false'), IsModer())
async def check_quote_false_msg(query: CallbackQuery, state: FSMContext, callback_data: CallbackData_CheckQuote):
    await state.set_state(State_check_false_msg.msg)
    
    data = await state.get_data()

    await query.message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=data['file_unique_id']).pack())],
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(State_check_false_msg.msg, IsModer())
async def msg_true(message: Message, state: FSMContext):
    await state.update_data(msg=f'<b>üòî –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n{message.text}')

    await message.answer(
        text=f'<b>–°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n{message.text}',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_false_msg')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='false', file_unique_id='0').pack())],
        ])
    )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –±–æ—Ç–∞
@dp.callback_query(F.data == 'send_false_msg', IsModer())
async def send_false_msg(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    msg = data['msg']
    user_id = data['user_id']
    file_unique_id = data['file_unique_id']

    await am.del_anime_quote_moder_by_id(file_unique_id)

    await query.message.delete()
    await query.answer(
        text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ'
    )

    await bot.send_message(
        chat_id=user_id,
        text=msg
    )


################################
#######--–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï--#######
################################

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
async def send_msg_quote(user_id, file_unique_id):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π
    anime_quote = await am.get_anime_quote_moder_by_id(file_unique_id)
    
    quote = anime_quote[3]
    anime_title = anime_quote[4]
    time_code = anime_quote[5]
    keys = anime_quote[6]
    type = anime_quote[7]
    user_id_creator = anime_quote[8]

    text = f'<a href="tg://user?id={user_id_creator}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n\n<b>–¶–ò–¢–ê–¢–ê:</b> {quote}\n<b>–ù–ê–ó–í–ê–ù–ò–ï –ê–ù–ò–ú–ï:</b> {anime_title}\n<b>–¢–ê–ô–ö–û–î:</b> {time_code}\n<b>–ö–õ–Æ–ß–ò:</b> {keys}\n<b>–¢–ò–ü:</b> {type}'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    await bot.send_video(
        chat_id=user_id,
        video=anime_quote[1],
        caption=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ', callback_data='video_file')],
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É', callback_data='quote')],
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ', callback_data='anime_title')],
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∫–æ–¥', callback_data='time_code')],
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–∏', callback_data='keys')],
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø', callback_data='type')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())],
        ]))


# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.callback_query(CallbackData_CheckQuote.filter(F.action == 'edit'), IsModer())
async def check_quote_edit(query: CallbackQuery, state: FSMContext, callback_data: CallbackData_CheckQuote):    
    file_unique_id = callback_data.file_unique_id
    await state.clear()
    await state.update_data(file_unique_id=file_unique_id)
    
    await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ', callback_data='video_file')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É', callback_data='quote')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ', callback_data='anime_title')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∫–æ–¥', callback_data='time_code')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–∏', callback_data='keys')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø', callback_data='type')],
        [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())],
    ]))



################################################################################
# –ó–∞–º–µ–Ω–∞ –≤–∏–¥–µ–æ
@dp.callback_query(F.data == 'video_file', IsModer())
async def process_change_video(query: CallbackQuery, state: FSMContext):
    await query.message.delete()

    await state.set_state(State_edit_quote_moder.video_file)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ])
    )

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–∏–¥–µ–æ
@dp.message(F.video, State_edit_quote_moder.video_file, IsModer())
async def take_video_file(message: Message, state: FSMContext):
    if int(message.video.file_size) < 5242880:
        await message.delete()
        data = await state.get_data()
        file_unique_id = data['file_unique_id']
        
        await state.clear()
        
        file_unique_id_2 = message.video.file_unique_id
        file_id = message.video.file_id

        await state.update_data(file_unique_id=file_unique_id_2)

        await am.update_amine_qoute_moder(
            file_unique_id=file_unique_id,
            file_unique_id_2=file_unique_id_2,
            file_id=file_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        await send_msg_quote(message.from_user.id, file_unique_id_2)

    else:
        await message.answer(
            text='–§–∞–π–ª –±–æ–ª—å—à–µ 5 –ú–ë, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞'
        )



################################################################################
# –ó–∞–º–µ–Ω–∞ —Ü–∏—Ç–∞—Ç—ã
@dp.callback_query(F.data == 'quote', IsModer())
async def process_change_quote(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_edit_quote_moder.quote)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
@dp.message(State_edit_quote_moder.quote, IsModer())
async def take_new_qoute(message: Message, state: FSMContext):
    data = await state.get_data()
    file_unique_id = data['file_unique_id']
    await state.clear()

    await am.update_amine_qoute_moder(
        file_unique_id=file_unique_id,
        quote=message.text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    await state.update_data(file_unique_id=file_unique_id)
    await send_msg_quote(message.from_user.id, file_unique_id)



################################################################################
# –ó–∞–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
@dp.callback_query(F.data == 'anime_title', IsModer())
async def process_change_anime_title(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_edit_quote_moder.anime_title)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
@dp.message(State_edit_quote_moder.anime_title, IsModer())
async def take_new_anime_title(message: Message, state: FSMContext):
    data = await state.get_data()
    file_unique_id = data['file_unique_id']
    await state.clear()

    await am.update_amine_qoute_moder(
        file_unique_id=file_unique_id,
        anime_title=message.text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    await state.update_data(file_unique_id=file_unique_id)
    await send_msg_quote(message.from_user.id, file_unique_id)



################################################################################
# –ó–∞–º–µ–Ω–∞ —Ç–∞–π–º–∫–æ–¥–∞
@dp.callback_query(F.data == 'time_code', IsModer())
async def process_change_time_code(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_edit_quote_moder.time_code)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω, —Å–µ—Ä–∏—é –∏ —Ç–∞–π–º–∫–æ–¥ –∞–Ω–∏–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1 2 5-45:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∫–æ–¥
@dp.message(State_edit_quote_moder.time_code, IsModer())
async def take_new_time_code(message: Message, state: FSMContext):
    data = await state.get_data()
    file_unique_id = data['file_unique_id']
    await state.clear()

    await am.update_amine_qoute_moder(
        file_unique_id=file_unique_id,
        time_code=message.text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    await state.update_data(file_unique_id=file_unique_id)
    await send_msg_quote(message.from_user.id, file_unique_id)



################################################################################
# –ó–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–π
@dp.callback_query(F.data == 'keys', IsModer())
async def process_change_keys(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_edit_quote_moder.keys)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text=get_keys,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ])
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
@dp.message(State_edit_quote_moder.keys, IsModer())
async def take_new_keys(message: Message, state: FSMContext):
    data = await state.get_data()
    file_unique_id = data['file_unique_id']
    await state.clear()

    await am.update_amine_qoute_moder(
        file_unique_id=file_unique_id,
        keys=message.text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    await state.update_data(file_unique_id=file_unique_id)
    await send_msg_quote(message.from_user.id, file_unique_id)




################################################################################
# –ó–∞–º–µ–Ω–∞ —Ç–∏–ø–∞ —Ü–∏—Ç–∞—Ç—ã
@dp.callback_query(F.data == 'type', IsModer())
async def process_change_type(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_edit_quote_moder.keys)
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    select_type_quote_moder = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üòÑ –†–∞–¥–æ—Å—Ç—å', callback_data=MyCallback(step='—Ä–∞–¥–æ—Å—Ç—å', action='type_moder').pack()), InlineKeyboardButton(text='üòò –•–≤–∞–ª–∏—Ç—å', callback_data=MyCallback(step='—Ö–≤–∞–ª–∏—Ç—å', action='type_moder').pack()),],
            [InlineKeyboardButton(text='üòî –ì—Ä—É—Å—Ç—å', callback_data=MyCallback(step='–≥—Ä—É—Å—Ç—å', action='type_moder').pack()), InlineKeyboardButton(text='ü§Ø –†—É–≥–∞—Ç—å', callback_data=MyCallback(step='—Ä—É–≥–∞—Ç—å', action='type_moder').pack()),],
            [InlineKeyboardButton(text='üòç –õ—é–±–æ–≤—å', callback_data=MyCallback(step='–ª—é–±–æ–≤—å', action='type_moder').pack()), InlineKeyboardButton(text='üò° –ó–ª–æ—Å—Ç—å', callback_data=MyCallback(step='–∑–ª–æ—Å—Ç—å', action='type_moder').pack()),],
            [InlineKeyboardButton(text='ü•∫ –ü—Ä–æ—â–∞–Ω–∏–µ', callback_data=MyCallback(step='–ø—Ä–æ—â–∞–Ω–∏–µ', action='type_moder').pack()), InlineKeyboardButton(text=' üòâ –°–æ–≥–ª–∞—Å–∏–µ', callback_data=MyCallback(step='—Å–æ–≥–ª–∞—Å–∏–µ', action='type_moder').pack()),],
            [InlineKeyboardButton(text='ü§ó –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data=MyCallback(step='–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', action='type_moder').pack()), InlineKeyboardButton(text='ü´£ –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ', callback_data=MyCallback(step='–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ', action='type_moder').pack()),],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())]
        ]   
    )

    await query.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ü–∏—Ç–∞—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ\n<i>(–∫–∞–∫–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã?)</i>',
        reply_markup=select_type_quote_moder,
    )


# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–º —Ü–∏—Ç–∞—Ç—ã
@dp.callback_query(MyCallback.filter(F.action == 'type_moder'), IsModer())
async def take_new_type(query: CallbackQuery, state: FSMContext, callback_data: MyCallback):
    type = callback_data.step
    
    data = await state.get_data()
    file_unique_id = data['file_unique_id']
    await state.clear()

    await am.update_amine_qoute_moder(
        file_unique_id=file_unique_id,
        type=type
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    await state.update_data(file_unique_id=file_unique_id)
    await send_msg_quote(query.from_user.id, file_unique_id)



#####################
#######--–ë–ê–ù--#######
#####################

# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(CallbackData_CheckQuote.filter(F.action == 'ban'), IsModer())
async def check_quote_ban(query: CallbackQuery, state: FSMContext, callback_data: CallbackData_CheckQuote):    
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    await query.message.answer(
        text='–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üçå –ë–∞–Ω', callback_data='ban_user')],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CallbackData_CheckQuote(action='check_quote', file_unique_id=file_unique_id).pack())],
        ])
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞–Ω–∞
@dp.callback_query(F.data == 'ban_user', IsModer())
async def check_quote_ban_confirm(query: CallbackQuery, state: FSMContext):    
    data = await state.get_data()
    file_unique_id = data['file_unique_id']

    quote_data = await am.get_anime_quote_moder_by_id(file_unique_id)
    user_id = quote_data[8]

    await um.update_user(
        id=user_id,
        status_user='pidor'
    )

    await am.del_all_anime_quote_moder(user_id)

    await query.message.answer(
        text=f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–∞–Ω–µ–Ω',
    )