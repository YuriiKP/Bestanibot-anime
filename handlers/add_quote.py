import os

from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext

from loader import dp, bot, am, um
from texts import add_quote_text, get_keys
from states import State_add_quote
from keyboards import select_type_quote
from custom_filters import IsModer



class MyCallback(CallbackData, prefix='back'):
    step: str
    action: str


@dp.message(F.text == add_quote_text, IsModer())
async def process_add_quote(message: Message, state: FSMContext):
    await state.set_state(State_add_quote.video_file)
    
    await message.answer(
        text='<b>–í–ò–î–ï–û?</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å —Ü–∏—Ç–∞—Ç–æ–π –∏–∑ –∞–Ω–∏–º–µ',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚≠ïÔ∏è –û—Ç–º–µ–Ω–∞', callback_data='start')]
        ]
        )
    )


# –ü—Ä–∏–Ω–∏–º–µ–º –≤–∏–¥–µ–æ
@dp.message(F.video, State_add_quote.video_file, IsModer())
async def take_video_file(message: Message, state: FSMContext):
    async def peocess_msg():
        await state.update_data(file_unique_id=file_unique_id, file_id=file_id)
        await state.set_state(State_add_quote.quote)

        await message.answer(
            text='<b>–¶–ò–¢–ê–¢–ê?</b>\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π –∏–∑ –≤–∏–¥–µ–æ',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='process_add_quote', action='back').pack())]
            ]
            )
        )
    

    file_unique_id = message.video.file_unique_id
    file_id = message.video.file_id
    
    if message.caption:
        qoute_data = message.caption
        qoute_data = qoute_data.split('*')
        
        if len(qoute_data) == 2:
            quote = qoute_data[0]
            anime_title = qoute_data[1]
            time_code = '-'

            await state.update_data(file_unique_id=file_unique_id, file_id=file_id, quote=quote, anime_title=anime_title, time_code=time_code)
            await state.set_state(State_add_quote.keys)

            await message.answer(
            text=get_keys,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_anime_title', action='back').pack())]
            ]
            )
        )

        elif len(qoute_data) == 3:
            quote = qoute_data[0]
            anime_title = qoute_data[1]
            time_code = qoute_data[2]

            await state.update_data(file_unique_id=file_unique_id, file_id=file_id, quote=quote, anime_title=anime_title, time_code=time_code)
            await state.set_state(State_add_quote.keys)

            await message.answer(
            text=get_keys,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_anime_title', action='back').pack())]
            ]
            )
        )
        
        else:
            await peocess_msg()

    else:
        await peocess_msg()


# –ü—Ä–∏–Ω–∏–º–µ–º —Ü–∏—Ç–∞—Ç—É –∏–∑ –≤–∏–¥–µ–æ
@dp.message(F.text, State_add_quote.quote, IsModer())
async def take_quote(message: Message, state: FSMContext):
    quote = message.text

    await state.update_data(quote=quote)
    await state.set_state(State_add_quote.anime_title)

    await message.answer(
        text='<b>–ù–ê–ó–í–ê–ù–ò–ï?</b>\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_video_file', action='back').pack())]
        ]
        )
    )


# –ü—Ä–∏–Ω–∏–º–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
@dp.message(F.text, State_add_quote.anime_title, IsModer())
async def take_anime_title(message: Message, state: FSMContext):
    anime_title = message.text

    await state.update_data(anime_title=anime_title)
    await state.set_state(State_add_quote.time_code)

    await message.answer(
        text='<b>–°–ï–ó–û–ù –ò –¢–ê–ô–ú–ö–û–î?</b>\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–°–ï–ó–û–ù –°–ï–†–ò–Æ –¢–ê–ô–ú–ö–û–î</b> –∞–Ω–∏–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1 2 5-45\n–ï—Å–ª–∏ —É –∞–Ω–∏–º–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ–∑–æ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ —É–∫–∞–∂–∏—Ç–µ 1',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_quote', action='back').pack())]
        ]
        )
    )


# –ü—Ä–∏–Ω–∏–º–µ–º —Ç–∞–π–º–∫–æ–¥
@dp.message(F.text, State_add_quote.time_code, IsModer())
async def take_time_code(message: Message, state: FSMContext):
    time_code = message.text

    await state.update_data(time_code=time_code)
    await state.set_state(State_add_quote.keys)

    await message.answer(
        text=get_keys,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_anime_title', action='back').pack())]
        ]
        )
    )


# –í—ã–±–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
@dp.message(F.text, State_add_quote.keys, IsModer())
async def take_type(message: Message, state: FSMContext):
    keys = message.text

    await state.update_data(keys=keys)

    await message.answer(
        text='<b>–¢–ò–ü?</b>\n–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ü–∏—Ç–∞—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ\n<i>(–∫–∞–∫–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã?)</i>',
        reply_markup=select_type_quote
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(MyCallback.filter(F.action == 'type'), IsModer())
async def take_confirm(query: CallbackQuery, state: FSMContext, callback_data: MyCallback):
    data = await state.get_data()

    quote = data['quote']
    anime_title = data['anime_title']
    time_code = data['time_code']
    keys = data['keys']
    
    type = callback_data.step
    await state.update_data(type=type)

    text = f'<b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –û–¢–ü–†–ê–í–ö–£ –î–ê–ù–ù–´–• –ù–ê –ú–û–î–ï–†–ê–¶–ò–Ø</b>\n\n<b>–¶–ò–¢–ê–¢–ê:</b> {quote}\n<b>–ù–ê–ó–í–ê–ù–ò–ï –ê–ù–ò–ú–ï:</b> {anime_title}\n<b>–¢–ê–ô–ö–û–î:</b> {time_code}\n<b>–ö–õ–Æ–ß–ò:</b> {keys}\n<b>–¢–ò–ü:</b> {type}'

    await query.message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_save_anime'),
                InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_type', action='back').pack()),
            ],
        ]
        )
    )


# –°–æ—Ö—Ä–∞–Ω—è–µ–º
@dp.callback_query(F.data == 'confirm_save_anime', IsModer())
async def storege_anime(query: CallbackQuery, state: FSMContext):    
    data = await state.get_data()

    file_unique_id = data['file_unique_id']
    file_id = data['file_id']
    quote = data['quote']
    anime_title = data['anime_title']
    time_code = data['time_code']
    keys = data['keys']
    type = data['type']

    path = os.path.join('data', 'video', f'{quote} {anime_title} {time_code}.mp4')
    await bot.download(file=file_id, destination=path)

    await am.add_amine_qoute(file_unique_id, file_id, path, quote, anime_title,
        time_code, keys, type, query.from_user.id
    )

    await query.message.answer(
        text='–°—è–ø, —Å—è–ø!',
    )

    await state.clear()
    await um.update_user(query.from_user.id, count_anime=1)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
@dp.callback_query(MyCallback.filter(F.action == 'back'), IsModer())
async def handnding_back(query: CallbackQuery, state: FSMContext, callback_data: MyCallback):
    step = callback_data.step
    
    if step == 'process_add_quote':
        await process_add_quote(query.message, state)
    
    if step == 'take_video_file':
        await state.set_state(State_add_quote.quote)
        await query.message.answer(
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π –∏–∑ –≤–∏–¥–µ–æ',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='process_add_quote', action='back').pack())]
            ]
            )
        )
    
    if step == 'take_quote':
        await state.set_state(State_add_quote.anime_title)
        await query.message.answer(
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_video_file', action='back').pack())]
            ]
            )
        )
    
    if step == 'take_anime_title':
        await state.set_state(State_add_quote.time_code)
        await query.message.answer(
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ <b>–°–ï–ó–û–ù –°–ï–†–ò–Æ –¢–ê–ô–ú–ö–û–î</b> –∞–Ω–∏–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1 2 5-45\n–ï—Å–ª–∏ —É –∞–Ω–∏–º–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ–∑–æ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ —É–∫–∞–∂–∏—Ç–µ 1',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_quote', action='back').pack())]
            ]
            )
        )
    
    if step == 'take_time_code':
        await state.set_state(State_add_quote.keys)
        await query.message.answer(
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–º –ª—é–¥—è–º –±—ã–ª–æ –ø—Ä–æ—â–µ –Ω–∞–π—Ç–∏ —ç—Ç—É —Ü–∏—Ç–∞—Ç—É <i>(–Ω–µ –º–µ–Ω—å—à–µ 5)</i>\n(—Å–∞–º–∞ —Ü–∏—Ç–∞—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å)\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://sinonim.org/',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=MyCallback(step='take_anime_title', action='back').pack())]
            ]
            )
        )

    if step == 'take_type':
        await query.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Ç–∏–ø –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ü–∏—Ç–∞—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ\n<i>(–∫–∞–∫–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã?)</i>',
        reply_markup=select_type_quote
    )